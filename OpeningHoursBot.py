#!/usr/bin/env python
# encoding: utf-8
# Helper script to fix common mistakes in opening_hours like values in OSM automatically.

# modules {{{
import logging, sys, re
import xml.etree.ElementTree as ET
sys.path.append('pyopening_hours/')
from osm_time.OpeningHours import OpeningHours, ParseException
# }}}

class OpeningHoursBot: # {{{
    def fix_xml_object(self, osm_xml_root): # {{{
        """Fix the given OSM XML object using the defended rule set."""
        osm_xml = osm_xml_root.getroot()

        logging.info(u'Parsing OSM file version "%s" generated by %s â€¦' % (osm_xml.attrib['version'], osm_xml.attrib['generator']))
        for node in osm_xml_root.findall('node'):
            self._for_object(node)
        for way in osm_xml_root.findall('way'):
            self._for_object(way)
    # }}}

    # rule set {{{
    def _fix_time_error_1(self, wrong_val):
        """ "0930-0630" -> "09:30-06:30" """
        regex = re.compile(r'\A(?P<start_hour>[0-1][0-9]|2[0-4])(?P<start_min>[:1-5][0-9]|0[0-9])\s*(?P<sep>-)\s*(?P<end_hour>[0-1][0-9]|2[0-4])(?P<end_min>[:1-5][0-9]|0[0-9])\Z')

        re_object = re.search(regex, wrong_val)
        if re_object == None:
            return wrong_val
        return '%s:%s%s%s:%s' % (
                re_object.group('start_hour'), re_object.group('start_min'),
                re_object.group('sep'),
                re_object.group('end_hour'), re_object.group('end_min')
                )

    fixing_functions = [ _fix_time_error_1 ]
    # }}}

    # helper functions {{{
    def _is_opening_hours_ok(self, value):
        """Returns True if there are no warnings and False if OpeningHours raises
        an exception. It will return None in all other cases."""
        error = False
        try:
            oh = OpeningHours(value)
        except ParseException as e:
            error = True

        if not error and not oh.getWarnings():
            return True
        elif error:
            return False
        else:
            return None
    # }}}

    # do the work {{{
    def _fix_opening_hours(self, tag):
        """Fix value of the tag with functions in fixing_functions list.

        :param tag: XML tag node.
        :returns: Boolean if fixing was successful.
        """
        value = tag.attrib['v']
        if self._is_opening_hours_ok(value) == False:
            correct_value = value
            for fix_oh_val_func in self.fixing_functions:
                correct_value = fix_oh_val_func(self, value)
                if value != correct_value:
                    break
            if value != correct_value:
                if self._is_opening_hours_ok(correct_value) == True:
                    logging.debug(u'Fixed value "%s" -> "%s"' % (value, correct_value))
                    tag.set('v', correct_value)
                    return True
                else:
                    logging.critical('OpeningHoursBot did generate a wrong opening_hours value ("%s" -> "%s")' % (value, correct_value))
        return False

    def _for_object(self, node):
        """Called for each object (node, way)."""
        fixing_successful = None
        for tag in node.findall('tag'):
            if tag.attrib['k'] == 'opening_hours':
                fixing_successful = self._fix_opening_hours(tag)
        if fixing_successful:
            node.set('action', 'modify')
    # }}}
# }}}

# main {{{
def main(osm_file):
    logging.basicConfig(
        format='%(levelname)s: %(message)s',
        level=logging.DEBUG,
        # level=logging.INFO,
        )

    if osm_file[-4:] == '.osm':
        osm_file_basename = osm_file[:-4]

    osm_xml_root = ET.parse(osm_file)

    oh_bot = OpeningHoursBot()

    oh_bot.fix_xml_object(osm_xml_root)

    osm_xml_root.write('%s-fixed.osm' % osm_file_basename)

if __name__ == '__main__':
    if len(sys.argv) > 1:
        osm_file = sys.argv[1]
    else:
        logging.error('Not enough parameters.'
                + ' 1. File path OSM file.'
                )
        sys.exit(1)
    main(osm_file)
# }}}
